<?xml version="1.0" encoding="UTF-8"?>
<local:TestResultsBase MaxRows="5"
    xmlns="http://xamarin.com/schemas/2014/forms" 
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" 
    x:Class="Saplin.CPDT.UICore.TestResults" 
    xmlns:ctrl="clr-namespace:Saplin.CPDT.UICore.Controls"
    xmlns:ctrl2="clr-namespace:Saplin.CPDT.UICore.Controls;assembly=CPDT.Extra"
    xmlns:anim="clr-namespace:Saplin.CPDT.UICore.Animations"
    xmlns:vm="clr-namespace:Saplin.CPDT.UICore.ViewModels"
    xmlns:local="clr-namespace:Saplin.CPDT.UICore"
    RowSpacing="0" HorizontalOptions="Fill">
    <Grid.RowHeight>
        <OnPlatform x:TypeArguments="GridLength">
            <On Platform="WPF" Value="36"/>  
            <On Platform="macOS" Value="48"/> 
            <On Platform="Android, iOS" Value="44"/>
        </OnPlatform>
    </Grid.RowHeight>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <ctrl:GridRepeater.ItemTemplate>
        <DataTemplate x:DataType="vm:TestResultsDetailed">
            <ctrl:GridItem>
                <Label Text="{Binding BulletPoint, StringFormat='{0}.'}" LineBreakMode="TailTruncation" VerticalOptions="StartAndExpand" />

                <Label VerticalOptions="Start">
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{Binding Result.TestName, Converter={StaticResource KeyToL11n}}" Style="{StaticResource SpanStyle}" />
                            <Span Text="&#xA;(" Style="{StaticResource Key=GrayedSpan}" />
                            <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, Block}" Style="{StaticResource GrayedSpan}"/>
                            <Span Text="{Binding Result.BlockSizeBytes, StringFormat=' {0}', Converter={StaticResource BytesToAutoShort}}" Style="{StaticResource GrayedSpan}"/>
                            <Span Text="{Binding Result.BlockSizeBytes, StringFormat='{0})', Converter={StaticResource BytesToAutoUnit}}" Style="{StaticResource GrayedSpan}"/>
                        </FormattedString>
                    </Label.FormattedText>
                </Label>
                
                <Label Grid.Column="3" Grid.ColumnSpan="2" Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, TestNotEnoughMemory}" 
                       LineBreakMode="TailTruncation" IsVisible="{Binding NotEnoughMemory}" HorizontalOptions="Fill" VerticalOptions="CenterAndExpand"/>

                <Label Grid.Column="3" Style="{StaticResource AccentedLabel}" 
                       IsVisible="{Binding ShowAvg}">
                    <Label.FormattedText >
                        <FormattedString>
                            <Span Text="{Binding Result.AvgThroughput, Converter={StaticResource MbPerSecondToAuto}}" />
                            <Span Text="{Binding Result.AvgThroughput, Converter={StaticResource MbPerSecondToAutoUnit}}" Style="{StaticResource AccentedSmallSpan}" />
                            <Span Text="{Binding Time, StringFormat='&#xA;{0}'}" Style="{StaticResource GrayedSpan}"/>
                        </FormattedString>
                    </Label.FormattedText>
                </Label>
              
                <ctrl2:TimeSeriesGraph Results="{Binding Result}" Trigger="{Binding Result}" IsVisible="{Binding ShowTimeSeries}" Smoothing="{Binding SmoothTimeSeries}"
                                      Grid.Column="4" Clip="True" Color="{StaticResource DefaultColor}">
                    <ctrl2:TimeSeriesGraph.Margin>
                        <OnPlatform x:TypeArguments="Thickness">
                            <On Platform="macOS, WPF" Value="8, 2, 24, 2"/> 
                            <On Platform="Android, iOS" Value="4, 3, 4, 4"/>
                        </OnPlatform>
                    </ctrl2:TimeSeriesGraph.Margin>
                </ctrl2:TimeSeriesGraph>

                <ctrl2:HistogramGraph BinsNumber="21" IsVisible="{Binding ShowHistogram}" UseCachedResults="true" CacheId="{Binding HistogramCacheId}" 
                                     Grid.Column="4" Color="{StaticResource DefaultColor}" >
                    <ctrl2:HistogramGraph.Margin>
                        <OnPlatform x:TypeArguments="Thickness">
                            <On Platform="macOS, WPF" Value="8, 2, 24, 2"/> 
                            <On Platform="Android, iOS" Value="4, 3, 4, 4"/>
                        </OnPlatform>
                    </ctrl2:HistogramGraph.Margin>
               </ctrl2:HistogramGraph>
                
                <StackLayout Grid.Column="4" Opacity="0" IsEnabled="false" IsVisible="{Binding ShowMin}" Margin="8, 0, 0, 0"
                             Orientation="Horizontal" VerticalOptions="CenterAndExpand" HorizontalOptions="StartAndExpand"> <!-- TODO, check on Android, macOS-->
                    <Label Style="{StaticResource SmallLabel}" HorizontalOptions="Start" >
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding MinAdjusted, Converter={StaticResource MbPerSecondToAuto}}" />
                                <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, Min, StringFormat='&#10;{0}, '}"/>
                                <Span Text="{Binding MinAdjusted, Converter={StaticResource MbPerSecondToAutoUnit}}"  />
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Label Style="{StaticResource SmallLabel}" HorizontalOptions="Start" IsVisible="{Binding ShowModeH}">
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding ModeH, Converter={StaticResource MbPerSecondToAuto}}" />
                                <Span Text="{Binding ModeHPercent, StringFormat='Ã·{0}%'}" />
                                <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, ModeH, StringFormat='&#10;{0}, '}"/>
                                <Span Text="{Binding ModeH, Converter={StaticResource MbPerSecondToAutoUnit}}" />
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Label Style="{StaticResource SmallLabel}" HorizontalOptions="Start">
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding MaxAdjusted, Converter={StaticResource MbPerSecondToAuto}}"  />
                                <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, Max, StringFormat='&#10;{0}, '}"/>
                                <Span Text="{Binding MaxAdjusted, StringFormat='{0} ', Converter={StaticResource MbPerSecondToAutoUnit}}" />
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                </StackLayout>

                <!--<Label Style="{StaticResource SmallLabel}" Opacity="0.0" Grid.Column="4" LineBreakMode="TailTruncation" IsEnabled="false"
                       IsVisible="{Binding NotEnoughMemory, Converter={StaticResource BoolNot}}" VerticalOptions="CenterAndExpand" HorizontalOptions="CenterAndExpand">  
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, Min, StringFormat=' {0}: '}"/>
                            <Span Text="{Binding MinAdjusted, Converter={StaticResource MbPerSecondToAuto}}" Style="{StaticResource SpanStyle}" />
                            <Span Text="{Binding MinAdjusted, Converter={StaticResource MbPerSecondToAutoUnit}}" Style="{StaticResource AccentedSmallSpan}" />
                            <Span Text="{Binding Source={x:Static vm:ViewModelContainer.L11n}, Max, StringFormat=' Ã· {0}: '}"/>
                            <Span Text="{Binding MaxAdjusted, Converter={StaticResource MbPerSecondToAuto}}" Style="{StaticResource SpanStyle}" />
                            <Span Text="{Binding MaxAdjusted, Converter={StaticResource MbPerSecondToAutoUnit}}" Style="{StaticResource AccentedSmallSpan}"  />
                        </FormattedString>
                    </Label.FormattedText>
                </Label>-->

            </ctrl:GridItem>
        </DataTemplate>
    </ctrl:GridRepeater.ItemTemplate>
    <ctrl:GridRepeater.FooterTemplate>
        <DataTemplate>
            <ctrl:GridItem>
                <!-- col 0-->
                <Label x:Name="statusBadge" IsVisible="{Binding TestStarted}" TextColor="Orange" Text="ðŸ”¥" 
                       Opacity="0.5"  HorizontalOptions="Center" LineBreakMode="TailTruncation" VerticalOptions="CenterAndExpand"/>
                <anim:BounceAnimation x:Name="badgeAnimation" Target="{x:Reference statusBadge}" />
                <!-- col 1-->
                <Label VerticalOptions="Start" Grid.Column="1" > 
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{Binding CurrentTest, Converter={StaticResource KeyToL11n}, Mode=OneWay}" Style="{StaticResource SpanStyle}" />
                            <Span Text="&#xA;(" Style="{StaticResource GrayedSpan}" />
                            <Span Text="{Binding Block, Mode=OneWay, Source={x:Static vm:ViewModelContainer.L11n}}" Style="{StaticResource GrayedSpan}" />
                            <Span Text="{Binding BlockSizeBytes, Mode=OneWay, StringFormat=' {0}', Converter={StaticResource BytesToAutoShort}}" Style="{StaticResource GrayedSpan}" />
                            <Span Text="{Binding BlockSizeBytes, Mode=OneWay, StringFormat='{0})', Converter={StaticResource BytesToAutoUnit}}" Style="{StaticResource GrayedSpan}" />
                            <Span Text=" " Style="{StaticResource GrayedSpan}" />
                        </FormattedString>
                    </Label.FormattedText>
                </Label>

                <Label Text="â† " VerticalOptions="CenterAndExpand"/>

                <Label Text="{Binding TestStatusMessage}" IsVisible="{Binding ShowTestStatusMessage}" Style="{StaticResource GrayedLabel}" 
                       HorizontalOptions="Fill" VerticalOptions="CenterAndExpand" Grid.Column="3" Grid.ColumnSpan="2"/>

                <!-- 
                There's a bug in Xamarin.Platform.WPF and LabelRenderer in case a Label is created with IsVisible=false (e.g. the bellow example in First version was created as invisible)
                in some cases within Grid Layout while measuring the contol in it's internals, System.OutOfMemoryExpcetion could occur. Investigation showed this was due to
                endless loop at Xamarin.Forms.Platform.UAP.TextBlockExtensions.cs line 78 'lineHeights.Add(lineHeight);'. The reason for that is 'defaultLineHeight' set to 0
                in LabelRenderer.UpdateText where heights are set to 0 to all spans within invisble labels and TextBlockExtensions.RecalculateSpanPositions loop not accounting for that case
                -->
                <Label IsVisible="{Binding ShowCurrentSpeed}" Style="{StaticResource AccentedLabel}" VerticalOptions="Start" 
                       Grid.Column="3" WidthRequest="90">
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{Binding RecentResultMbps, Mode=OneWay, Converter={StaticResource MbPerSecondToAuto}}" />
                            <Span Text="{Binding RecentResultMbps, Mode=OneWay, Converter={StaticResource MbPerSecondToAutoUnit}}" Style="{StaticResource SmallSpan}" />
                            <Span Text="{Binding ProgressPercent, StringFormat='&#xA;{0:0}%', Mode=OneWay}" Style="{StaticResource GrayedSpan}"  />
                        </FormattedString>
                    </Label.FormattedText>
                </Label>

                <ctrl2:TimeSeriesGraph Results="{Binding RecentResults}" Trigger="{Binding ProgressPercent}" IsVisible="{Binding ShowTimeSeries}" Color="{StaticResource DefaultColor}"
                                      TotalPoints="{Binding SeqTotalBlocks}" Grid.Column="4" Clip="True" Smoothing="{Binding SmoothTimeSeries}">
                    <ctrl2:TimeSeriesGraph.Margin>
                        <OnPlatform x:TypeArguments="Thickness">
                            <On Platform="macOS, WPF" Value="8, 2, 24, 2"/> 
                            <On Platform="Android, iOS" Value="4, 3, 4, 4"/>
                        </OnPlatform>
                    </ctrl2:TimeSeriesGraph.Margin>
                </ctrl2:TimeSeriesGraph>

                <ctrl2:HistogramGraph BinsNumber="21" Results="{Binding RecentResults}" Trigger="{Binding ProgressPercent}" 
                                     IsVisible="{Binding ShowTimeSeries, Converter={StaticResource BoolNot}}" Color="{StaticResource DefaultColor}"
                                     Grid.Column="4" CacheId="{Binding RandTestCounterForHistogramCache}">
                    <ctrl2:HistogramGraph.Margin>
                        <OnPlatform x:TypeArguments="Thickness">
                            <On Platform="macOS, WPF" Value="8, 2, 24, 2"/> 
                            <On Platform="Android, iOS" Value="4, 3, 4, 4"/>
                        </OnPlatform>
                    </ctrl2:HistogramGraph.Margin>    
                </ctrl2:HistogramGraph>

            </ctrl:GridItem>
        </DataTemplate>
    </ctrl:GridRepeater.FooterTemplate>
</local:TestResultsBase>